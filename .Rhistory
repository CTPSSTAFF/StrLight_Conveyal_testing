Day.Part,
Average.Daily.O.D.Traffic..StL.Volume.,
pct_low_income,
pct_non_low_income) %>%
rename(origin_id = Origin.Zone.Name,
dest_id = Destination.Zone.Name,
dow = Day.Type,
time = Day.Part,
trips = Average.Daily.O.D.Traffic..StL.Volume.)
od_inc_r <- od_inc_r %>% mutate_at('trips',as.numeric) %>%
mutate_at(c('origin_id','dest_id'),as.character)
od_inc_r <- od_inc_r %>% filter(origin_id != dest_id)
od_race_r <- od_race  %>%
mutate(minority = Black +
American.Indian +
Asian +
Pacific.Islander +
Other.Race +
Multiple.Races,
non_minority = White) %>%
select(Origin.Zone.Name,
Destination.Zone.Name,
Day.Type,
Day.Part,
minority,
non_minority,
Average.Daily.O.D.Traffic..StL.Volume.) %>%
rename(origin_id = Origin.Zone.Name,
dest_id = Destination.Zone.Name,
dow = Day.Type,
time = Day.Part,
trips = Average.Daily.O.D.Traffic..StL.Volume.)
od_race_r <- od_race_r %>% mutate_at('trips',as.numeric) %>%
mutate_at(c('origin_id','dest_id'),as.character)
od_race_r <- od_race_r %>% filter(origin_id != dest_id)
#saveRDS(od_all_r,"Data/input/SL/sl_od_all.rds")
saveRDS(od_inc_r,"Data/input/SL/sl_od_inc.rds")
saveRDS(od_race_r,"Data/input/SL/sl_od_race.rds")
View(od_race_r)
View(od_inc_r)
od_inc_wkdy_2pm <- od_inc_r %>% filter(dow == "1: Weekday (M-F)",
time == "15: 2pm (2pm-3pm)")
View(od_inc_wkdy_2pm)
od_inc_wkdy_2pm %>% filter(origin_id == "2500905229001")
one_origin <- od_inc_wkdy_2pm %>% filter(origin_id == "2500905229001")
View(one_origin)
View(taz)
View(od_taz)
taz_one_origin <- taz %>% left_join(one_origin,by = c("GEOID10" = "dest_id"))
View(taz_one_origin)
sum(taz_one_origin$trips,rm.na=T)
sum(taz_one_origin$trips,rm.na=F)
sum(taz_one_origin$trips,na.rm = F)
sum(taz_one_origin$trips,na.rm = T)
sum(one_origin$trips,na.rm = T)
st_write(taz_one_origin,"Data/TAZ/taz_one_origin.shp")
od_inc_wkdy_2pm %>% left_join(base_matrix_mean,by = c("origin_id" = "fromGEOID") )
base_matrix_od2pm <- od_inc_wkdy_2pm %>% left_join(base_matrix_mean,by = c("origin_id" = "fromGEOID") )
?left_join
base_matrix_od2pm <- od_inc_wkdy_2pm %>% left_join(base_matrix_mean,by = c("origin_id" = "fromGEOID", "dest_id" = "toGEOID"))
View(base_matrix_od2pm)
base_matrix_od2pm <- base_matrix_od2pm %>% mutate(li_trips = pct_low_income * trips,
nli_trips = pct_non_low_income * trips)
View(base_matrix_od2pm)
base_matrix_od2pm <- od_inc_wkdy_2pm %>% left_join(base_matrix_mean,by = c("origin_id" = "fromGEOID", "dest_id" = "toGEOID"))
base_matrix_od2pm <- base_matrix_od2pm %>% mutate(li_trip_mins = (pct_low_income * trips)*mean_travel_time,
nli_trip_mins = (pct_non_low_income * trips)*mean_travel_time)
View(base_matrix_od2pm)
sum(base_matrix_od2pm$li_trip_mins)
sum(base_matrix_od2pm$li_trip_mins,na.rm = T)
sum(base_matrix_od2pm$nli_trip_mins,na.rm = T)
base_li_trip_mins <- sum(base_matrix_od2pm$li_trip_mins,na.rm = T)
base_nli_trip_mins <- sum(base_matrix_od2pm$nli_trip_mins,na.rm = T)
prop_matrix_od2pm <- od_inc_wkdy_2pm %>% left_join(base_matrix_mean,by = c("origin_id" = "fromGEOID", "dest_id" = "toGEOID"))
prop_matrix_od2pm <- prop_matrix_od2pm %>% mutate(li_trip_mins = (pct_low_income * trips)*mean_travel_time,
nli_trip_mins = (pct_non_low_income * trips)*mean_travel_time)
prop_li_trip_mins <- sum(prop_matrix_od2pm$li_trip_mins,na.rm = T)
prop_nli_trip_mins <- sum(prop_matrix_od2pm$nli_trip_mins,na.rm = T)
prop_matrix_od2pm <- od_inc_wkdy_2pm %>% left_join(prop_matrix_mean,by = c("origin_id" = "fromGEOID", "dest_id" = "toGEOID"))
prop_matrix_od2pm <- prop_matrix_od2pm %>% mutate(li_trip_mins = (pct_low_income * trips)*mean_travel_time,
nli_trip_mins = (pct_non_low_income * trips)*mean_travel_time)
prop_li_trip_mins <- sum(prop_matrix_od2pm$li_trip_mins,na.rm = T)
prop_nli_trip_mins <- sum(prop_matrix_od2pm$nli_trip_mins,na.rm = T)
(base_li_trip_mins - prop_li_trip_mins)/base_li_trip_mins
(base_nli_trip_mins - prop_nli_trip_mins)/base_nli_trip_mins
((base_li_trip_mins - prop_li_trip_mins)/base_li_trip_mins)/((base_nli_trip_mins - prop_nli_trip_mins)/base_nli_trip_mins)
od_points <- readRDS("C:/Users/bbact/Documents/od_points.rds")
base_matrix
View(base_matrix)
base_matrix <- readRDS("Data/Processed/base_matrix.rds")
View(base_matrix)
ncols(base_matrix)
colnames(base_matrix)
base_matrix %>% select("fromId","toId","travel_time") %>%
rename("hr_00" = "travel_time")
col_name <- "hr_01"
base_matrix %>% select("fromId","toId","travel_time") %>%
rename(col_name = "travel_time")
base_matrix %>% select("fromId","toId","travel_time") %>%
rename(`col_name` = "travel_time")
base_matrix %>% select("fromId","toId","travel_time") %>%
rename(!!col_name = "travel_time")
base_matrix %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
start_hour <- 0
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
paste0("13-05-2019 ",start_hour,":00:00")
departure_datetime
departure_datetime <- as.POSIXct("13-05-2019 00:00:00",
format = "%d-%m-%Y %H:%M:%S")
departure_datetime
departure_datetime <- as.POSIXct("13-05-2019 01:00:00",
format = "%d-%m-%Y %H:%M:%S")
s
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
seq.int(0,2)
end_hour <- "23"
seq.int(as.numeric(start_hour),as.numeric(end_hour))
hour_list <-  seq.int(as.numeric(start_hour),as.numeric(end_hour))
paste0("B19001_", str_pad(hour_list , width = 3, side = "left", pad = 0))
paste0(str_pad(hour_list))
print(hour_list)
paste0(str_pad(hour_list , width = 3, side = "left", pad = 0))
paste0(str_pad(hour_list , width = 2, side = "left", pad = 0))
hour_list <- seq.int(as.numeric(start_hour),as.numeric(end_hour))
hour_list_str <- paste0(str_pad(hour_list , width = 2, side = "left", pad = 0))
hour_list_str
hour_list_str[1]
hour_list_str[2]
hour_list <- seq.int(as.numeric(start_hour)+1,as.numeric(end_hour))
hour_list_str <- paste0(str_pad(hour_list , width = 2, side = "left", pad = 0))
col_name <- paste0("hr_",start_hour)
col_name
base_matrix %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
library(rJava)
sys_memory <- "50000" #system memory in MB to allocate to Java
java_ram <- paste0("-Xmx",sys_memory,"m")
options(java.parameters = java_ram)
rJava::.jinit(force.init=TRUE)
source("./R_functions/OD_point_functions.R")
source("./Analysis/Build_network.R")
source("./Analysis/Cleanup_network_files.R")
source("./Analysis/Transit_routing_r5r.R")
baseline_gtfs <- "gtfs_base_031522_v2"
proposed_gtfs <- "gtfs_bnrd_041922_v2"
base_network <- build_network(network_dir="Base_network",gtfs="gtfs_base_031522_v2",sys_memory=sys_memory)
cleanup_network(network_dir="Base_network")
od_points <- create_od_points(state=c("MA","RI"), year=2020) #need to update to join TAZ GEOIDs to points and remove any that are not in a taz
od_points <- create_od_points(state=c("MA","RI"), year=2020) #need to update to join TAZ GEOIDs to points and remove any that are not in a taz
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
base_network
od_points <- st_read("Data/Processed/od_points.shp")
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 1600   # meters
max_trip_duration <- 120 # minutes
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
network <- base_network
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 1600   # meters
max_trip_duration <- 120 # minutes
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm1 <- ttm1 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
View(ttm1)
#loop through times
hour_list <- seq.int(as.numeric(start_hour)+1,as.numeric(end_hour))
hour_list_str <- paste0(str_pad(hour_list , width = 2, side = "left", pad = 0))
for (hr in hour_list_str){
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
tt1 <- tt1 %>% left_join(tt2,by = c("fromId" = "fromId", "toId" = "toId"))
}
for (hr in hour_list_str){
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
ttm1 <- ttm1 %>% left_join(tt2,by = c("fromId" = "fromId", "toId" = "toId"))
}
for (hr in hour_list_str){
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
ttm1 <- ttm1 %>% left_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"))
}
#                              origins = taz_xy,
#                              destinations = taz_xy,
#                              mode = mode,
#                              departure_datetime = departure_datetime,
#                              max_walk_dist = max_walk_dist,
#                              max_trip_duration = max_trip_duration,
#                              shortest_path = T,
#                              drop_geometry = FALSE)
#
# st_write(det,"Data/StreetLight/TAZ_Centroids/itineraries.shp")
xlcFreeMemory()
hr <- "08"
base_matrix
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm1 <- ttm1 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
View(ttm1)
hr
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",hr)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
View(ttm1)
View(ttm2)
ttm3 <- ttm1 %>% left_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"))
View(ttm3)
ttm3 <- ttm1 %>% left_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"),keep=T)
ttm3 <- ttm1 %>% full_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"))
View(ttm3)
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:01"),
format = "%d-%m-%Y %H:%M:%S")
departure_datetime
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
mean(ttm1$travel_time)
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
mean(ttm1$travel_time)
mean(ttm12$travel_time)
mean(ttm2$travel_time)
mean(ttm2$travel_time,na.rm=T)
mean(ttm2$travel_time,na.rm=F)
mean(ttm2$travel_time,rm.na=F)
View(ttm2)
mean(ttm2$hr_08)
View(ttm1)
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
#tic()
# 3.1) calculate a travel time matrix
ttm1 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",start_hour)
ttm1 <- ttm1 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
#loop through times
hour_list <- seq.int(as.numeric(start_hour)+1,as.numeric(end_hour))
hour_list_str <- paste0(str_pad(hour_list , width = 2, side = "left", pad = 0))
for (hr in hour_list_str){
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",hr)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
ttm3 <- ttm1 %>% full_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"))
}
for (hr in hour_list_str){
departure_datetime <- as.POSIXct(paste0("13-05-2019 ",hr,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
ttm2 <- travel_time_matrix(r5r_core = network,
origins = od_points,
destinations = od_points,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
col_name <- paste0("hr_",hr)
ttm2 <- ttm2 %>% select("fromId","toId","travel_time") %>%
rename(!!col_name := "travel_time")
ttm1 <- ttm1 %>% full_join(ttm2,by = c("fromId" = "fromId", "toId" = "toId"))
}
View(ttm1)
hr
View(ttm2)
View(ttm3)
View(ttm1)
mean(ttm1$hr_0)
mean(ttm1$hr_0,rm.na=T)
mean(ttm1$hr_0,rm.na=F)
mean(ttm1$hr_0,na.rm = =F)
mean(ttm1$hr_0,na.rm = F)
mean(ttm1$hr_0,na.rm = T)
mean(ttm1$hr_01,na.rm = T)
mean(ttm1$hr_07,na.rm = T)
mean(ttm1$hr_05,na.rm = T)
mean(ttm1$hr_08,na.rm = T)
mean(ttm1$hr_15,na.rm = T)
?mean
replace_na(ttm1, 120)
ttm1[is.na(ttm1)] <- 120
View(ttm1)
mean(ttm1$hr_0)
mean(ttm1$hr_1)
mean(ttm1$hr_01)
mean(ttm1$hr_02)
mean(ttm1$hr_03)
mean(ttm1$hr_04)
mean(ttm1$hr_05)
mean(ttm1$hr_06)
mean(ttm1$hr_07)
mean(ttm1$hr_08)
mean(ttm1$hr_09)
mean(ttm1$hr_10)
mean(ttm1$hr_11)
departure_datetime <- as.POSIXct(paste0("11-05-2019 ",start_hour,":00:00"),
format = "%d-%m-%Y %H:%M:%S")
departure_datetime <- as.POSIXct(paste0("11-05-2019 "5":00:00"),
format = "%d-%m-%Y %H:%M:%S"
departure_datetime <- as.POSIXct(paste0("11-05-2019 5:00:00"),
format = "%d-%m-%Y %H:%M:%S"
)
departure_datetime
weekdays(departure_datetime )
weekdays(departure_datetime)
?weekdays
weekdays(departure_datetime,abbreviate = T)
library(tidyverse)
od_points <- st_read("Data/Processed/od_points.shp")
taz_ri <- st_read("Data/TAZ/tl_2011_44_taz10/tl_2011_44_taz10.shp")
taz_ma <- st_read("Data/TAZ/tl_2011_25_taz10/tl_2011_25_taz10.shp")
taz <- rbind(taz_ri,taz_ma) %>% st_transform(crs=4326)
library(sf)
od_points <- st_read("Data/Processed/od_points.shp")
taz_ri <- st_read("Data/TAZ/tl_2011_44_taz10/tl_2011_44_taz10.shp")
taz_ma <- st_read("Data/TAZ/tl_2011_25_taz10/tl_2011_25_taz10.shp")
taz <- rbind(taz_ri,taz_ma) %>% st_transform(crs=4326)
matrix <- readRDS("Data/Processed/base_matrix.rds")
od_taz = st_join(od_points, taz, join = st_intersects) %>%
select(id,GEOID10) %>%
drop_na(GEOID10) %>%
mutate(id = as.character(id))
od_taz_nogeo <- as_tibble(od_taz) %>% select(id,GEOID10)
matrix <- matrix %>% left_join(od_taz,by = c("fromId" = "id")) %>%
rename("fromGEOID" = "GEOID10") %>%
left_join(od_taz_nogeo,by = c("toId" = "id")) %>%
rename("toGEOID" = "GEOID10") %>%
drop_na(fromGEOID,toGEOID)
#filter out travel from and to the same taz
mean_matrix <- matrix %>% filter(fromGEOID != toGEOID) %>%
group_by(fromGEOID,toGEOID) %>%
summarize(mean_travel_time = mean(travel_time))# summarize mean travel time between TAZ pairs
View(mean_matrix)
library(rJava)
sys_memory <- "50000" #system memory in MB to allocate to Java
java_ram <- paste0("-Xmx",sys_memory,"m")
options(java.parameters = java_ram)
rJava::.jinit(force.init=TRUE)
source("./R_functions/OD_point_functions.R")
source("./Analysis/Build_network.R")
source("./Analysis/Cleanup_network_files.R")
source("./Analysis/Transit_routing_r5r.R")
baseline_gtfs <- "gtfs_base_031522_v2"
proposed_gtfs <- "gtfs_bnrd_041922_v2"
#for reference: https://walker-data.com/tidycensus/articles/basic-usage.html
library(tidycensus)
library(tidyverse)
library(sf)
library(tigris)
library(geojsonsf)
library(reticulate)
options(tigris_use_cache = TRUE)
use_condaenv(condaenv  = "Py_env/",required = TRUE)# "/" locates the correct location and "required = TRUE" forces reticulate to use this version
source_python("Py_functions/OD_point_generator.py")
source_python("Py_functions/point_water_road_filter.py")
