library(r5r)
options(java.parameters = "-Xmx25G")
rJava::.jinit()
path <- "C:/Users/bbact/Desktop/r5r_directory"
r5r_core <- setup_r5(data_path = path, verbose = T)
library(r5r)
library(tidyverse)
library(sf)
rJava::.jinit()
options(java.parameters = "-Xmx75G")
taz_grid <- st_read("Data/StreetLight/TAZ_Centroids/grid_100m_nowat_roads.shp")
taz_grid$id <- seq.int(nrow(taz_grid))
taz_xy <- taz_grid %>%
mutate(long = unlist(map(taz_grid$geometry,1)),
lat = unlist(map(taz_grid$geometry,2))) %>%
select(id,geometry,lat,long)
path <- "C:/Users/bbact/Desktop/r5r_directory"
r5r_core <- setup_r5(data_path = path, verbose = T)
library(tictoc)
tic()
tock()
toc()
tic()
tic()
# 3.1) calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = taz_xy,
destinations = taz_xy,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = TRUE,
progress = TRUE,
breakdown_stat = "min")
time_to_calculate <- toc()
r5r_core <- setup_r5(data_path = path, verbose = F)
library(r5r)
library(tidyverse)
library(sf)
library(tictoc)
options(java.parameters = "-Xmx75G")
rJava::.jinit()
path <- "C:/Users/bbact/Desktop/r5r_directory"
r5r_core <- setup_r5(data_path = path, verbose = F)
taz_grid <- st_read("Data/StreetLight/TAZ_Centroids/Moderate_400m_grid.shp")
taz_grid$id <- seq.int(nrow(taz_grid))
taz_xy <- taz_grid %>%
mutate(long = unlist(map(taz_grid$geometry,1)),
lat = unlist(map(taz_grid$geometry,2))) %>%
select(id,geometry,lat,long)
mode <- c("WALK", "TRANSIT")
max_walk_dist <- 1600   # meters
max_trip_duration <- 120 # minutes
departure_datetime <- as.POSIXct("13-05-2019 14:00:00",
format = "%d-%m-%Y %H:%M:%S")
tic()
# 3.1) calculate a travel time matrix
ttm <- travel_time_matrix(r5r_core = r5r_core,
origins = taz_xy,
destinations = taz_xy,
mode = mode,
departure_datetime = departure_datetime,
max_walk_dist = max_walk_dist,
max_trip_duration = max_trip_duration,
breakdown = TRUE,
verbose = FALSE,
progress = TRUE,
breakdown_stat = "min")
time_to_calculate <- toc()
View(ttm)
View(taz_xy)
source("./R_functions/census_data_prep.R")
# census data pull inputs
year_acs <- 2020
year_dec <- 2020
state <- c("MA","RI")
counties <- list()
for (i in 1:length(state)){
state_i <- state[i]
counties_i <- counties(state_i) %>%
st_drop_geometry() %>%
select(GEOID,STATEFP, COUNTYFP)
counties[[i]] <- counties_i
}
counties <-bind_rows(counties)
all_water <- list()
for (i in 1:nrow(counties)){
water_i <- area_water(counties$STATEFP[[i]], counties$COUNTYFP[[i]], year= year_acs) %>%
mutate(GEOID_county= counties$GEOID[[i]])
all_water[[i]]<- water_i
}
all_water <- bind_rows(all_water) %>% st_as_sf()
st_write(all_water,"Data/Processed/water_ma_ri.geojson")
st_write
all_water
#pt_dir <- "C:/Users/bbact/Documents/GitHub/StrLight_Conveyal_testing/Data/TAZ/MA_RI_1000m_pt_grid.geojson"
mbta_service_area <- read_sf("https://services1.arcgis.com/ceiitspzDAHrdGO1/arcgis/rest/services/MBTA_Extended_Service_Area/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")
st_write(mbta_service_area,"Data/Processed/mbta_service_area.shp")
st_write(mbta_service_area,"Data/Processed/mbta_service_area.geojson")
st_write(mbta_service_area,"Data/input/mbta_service_area.geojson")
st_write(all_water,"Data/input/water_ma_ri.geojson")
mbta_service_area
?roads
get_roads_for_state <- function(state, year_acs){
counties<- counties(state) %>% st_drop_geometry()
ri_roads <- rbind_tigris(
lapply(counties$NAME, function(x){
roads(state, x, year= year_acs)
})
)
}
state
get_roads_for_state(state=state, year=year_acs)
counties<- counties(state) %>% st_drop_geometry()
ri_roads <- rbind_tigris(
lapply(counties$NAME, function(x){
roads(state, x, year= year_acs)
})
)
roads(state, x="Middlesex", year= year_acs)
roads(state, county = ="Middlesex", year= year_acs)
roads(state, county ="Middlesex", year= year_acs)
roads(state="MA", county ="Middlesex", year= year_acs)
rbind(ma_roads,ri_roads)
ma_roads <- get_roads_for_state(state="MA", year=year_acs)
ri_roads <- get_roads_for_state(state="RI", year=year_acs)
roads(state, year= year_acs)
rbind(ma_roads,ri_roads)
ma_roads
ma_ri_roads <- rbind(ma_roads,ri_roads)
st_write(ma_ri_roads,"Data/input/roads_ma_ri.geojson")
st_write(ma_roads,"Data/input/ma_roads.geojson")
counties<- counties(state) %>% st_drop_geometry()
counties
counties_reduced <- filter(NAME == "Suffolk")
counties_reduced <- counties %>% filter(NAME == "Suffolk")
counties_reduced <- counties %>% filter(NAME == "Suffolk"|
NAME == "Norfolk"|
NAME == "Middlesex"|
NAME == "Worcester"|
NAME == "Essex"|
NAME == "Plymouth"|
NAME == "Bristol")}
counties_reduced <- counties %>% filter(NAME == "Suffolk"|
NAME == "Norfolk"|
NAME == "Middlesex"|
NAME == "Worcester"|
NAME == "Essex"|
NAME == "Plymouth"|
NAME == "Bristol")
counties<- counties("RI") %>% st_drop_geometry()
counties
get_roads_for_state <- function(state, year_acs){
counties<- counties(state) %>% st_drop_geometry()
if (state == "MA"){
counties_reduced <- counties %>% filter(NAME == "Suffolk"|
NAME == "Norfolk"|
NAME == "Middlesex"|
NAME == "Worcester"|
NAME == "Essex"|
NAME == "Plymouth"|
NAME == "Bristol")
}
if (state == "RI"){
counties_reduced <- counties %>% filter(NAME == "Providence"|
NAME == "Bristol"|
NAME == "Washington")
}
ri_roads <- rbind_tigris(
lapply(counties$NAME, function(x){
roads(state, x, year= year_acs)
})
)
}
ma_roads <- get_roads_for_state(state="MA", year=year_acs)
ri_roads <- get_roads_for_state(state="RI", year=year_acs)
get_roads_for_state <- function(state, year_acs){
counties<- counties(state) %>% st_drop_geometry()
if (state == "MA"){
counties <- counties %>% filter(NAME == "Suffolk"|
NAME == "Norfolk"|
NAME == "Middlesex"|
NAME == "Worcester"|
NAME == "Essex"|
NAME == "Plymouth"|
NAME == "Bristol")
}
if (state == "RI"){
counties <- counties %>% filter(NAME == "Providence"|
NAME == "Bristol"|
NAME == "Washington")
}
ri_roads <- rbind_tigris(
lapply(counties$NAME, function(x){
roads(state, x, year= year_acs)
})
)
}
ma_roads <- get_roads_for_state(state="MA", year=year_acs)
ri_roads <- get_roads_for_state(state="RI", year=year_acs)
st_write(ma_roads,"Data/input/ma_roads.geojson")
st_write(ma_roads,"Data/input/ma_roads.geojson",append=FALSE)
st_write(ma_roads,"Data/input/ma_roads.geojson",append=FALSE)
ma_roads <- get_roads_for_state(state="MA", year=year_acs)
ri_roads <- get_roads_for_state(state="RI", year=year_acs)
ma_ri_roads <- rbind(ma_roads,ri_roads)
st_write(ma_ri_roads,"Data/input/roads_ma_ri",append=FALSE)
st_write(ma_ri_roads,"Data/input/roads_ma_ri.geojson",append=FALSE)
ma_ri_roads
#for reference: https://walker-data.com/tidycensus/articles/basic-usage.html
library(tidycensus)
library(tidyverse)
library(sf)
library(tigris)
library(geojsonsf)
library(reticulate)
options(tigris_use_cache = TRUE)
year_acs <- 2020
year_dec <- 2020
state <- c("MA","RI")
counties <- list()
for (i in 1:length(state)){
state_i <- state[i]
counties_i <- counties(state_i) %>%
st_drop_geometry() %>%
select(GEOID,STATEFP, COUNTYFP)
counties[[i]] <- counties_i
}
counties <-bind_rows(counties)
all_water <- list()
for (i in 1:nrow(counties)){
water_i <- area_water(counties$STATEFP[[i]], counties$COUNTYFP[[i]], year= year_acs) %>%
mutate(GEOID_county= counties$GEOID[[i]])
all_water[[i]]<- water_i
}
all_water <- bind_rows(all_water) %>% st_as_sf()
st_write(all_water,"Data/input/water_ma_ri.geojson")
use_condaenv(condaenv  = "Py_env/",required = TRUE)# "/" locates the correct location and "required = TRUE" forces reticulate to use this version
use_condaenv(condaenv  = "Py_env/",required = TRUE)# "/" locates the correct location and "required = TRUE" forces reticulate to use this version
source_python("Py_functions/OD_point_generator.py")
source_python("Py_functions/OD_point_generator.py")
counties
water_i
counties_i
test_function(water_i)
wit <- test_function(water_i)
View(wit)
View(water_i)
wit
sf(wit)
st_as_sf(wit)
wit.columns()
columns(wit)
cols(wit)
